"use client";
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import ITRHelperButton from "@/components/itr-helper/ITRHelperButton";
import ITRReportRenderer from "@/components/itr-report/ITRReportRenderer";
import ChatbotOverlay from "@/components/chatbot/ChatbotOverlay";

interface ITRResult {
  task?: string;
  result?: string;
  markdown?: string;
  file_saved?: string;
  ca_report_used?: boolean;
  ca_report_length?: number;
  files_processed?: number;
  client_category?: string;
  document_processing_status?: string;
  // Legacy fields for backward compatibility
  recommendations?: string[];
  tax_savings?: {
    amount: number;
    percentage: number;
  };
  investment_suggestions?: string[];
  deductions?: string[];
  summary?: string;
  status?: string;
  message?: string;
}

export default function ITRReportPage() {
  const [itrResult, setItrResult] = useState<ITRResult | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    try {
      const storedResult = localStorage.getItem('itrAnalysisResult');
      if (storedResult) {
        const result = JSON.parse(storedResult);
        setItrResult(result);
      } else {
        setError('No ITR analysis result found. Please run the analysis first.');
      }
    } catch (err) {
      setError('Failed to load ITR analysis result.');
      console.error('Error loading ITR result:', err);
    } finally {
      setLoading(false);
    }
  }, []);

  const handleBackToHome = () => {
    window.location.href = '/ca-report';
  };

  // Check if we have detailed markdown content
  const hasDetailedReport = itrResult?.markdown && itrResult.markdown.length > 500;
  
  const getReportType = (): 'BUSINESSMAN' | 'SALARIED' | 'SELF-EMPLOYED' => {
    const task = itrResult?.task?.toLowerCase() || '';
    const clientCategory = itrResult?.client_category?.toLowerCase() || '';
    
    if (task.includes('businessman') || clientCategory.includes('business')) return 'BUSINESSMAN';
    if (task.includes('salaried') || clientCategory.includes('salaried')) return 'SALARIED';
    if (task.includes('self-employed') || task.includes('self_employed') || clientCategory.includes('self')) return 'SELF-EMPLOYED';
    
    return 'SALARIED'; // default
  };

  const handleDownloadReport = () => {
    if (!itrResult) return;
    
    // Use the markdown content from API if available, otherwise create a basic report
    const reportContent = itrResult.markdown || `
# ITR Optimization Report

## Analysis Information
- **Client Type**: ${itrResult.client_category?.toUpperCase() || 'Unknown'}
- **CA Report Used**: ${itrResult.ca_report_used ? 'Yes' : 'No'}
- **PDF Files Processed**: ${itrResult.files_processed || 0}
- **CA Report Size**: ${itrResult.ca_report_length || 0} characters
- **Task**: ${itrResult.task || 'ITR Tax Optimization'}

## Analysis Results

${itrResult.result || 'Analysis completed successfully'}

## Legacy Fields (if available)

### Summary
${itrResult.summary || 'Not provided'}

### Tax Savings Potential
${itrResult.tax_savings ? `‚Çπ${itrResult.tax_savings.amount.toLocaleString()} (${itrResult.tax_savings.percentage}% savings)` : 'No specific savings calculated'}

### Recommendations
${itrResult.recommendations?.map(rec => `- ${rec}`).join('\n') || 'No specific recommendations available'}

### Investment Suggestions
${itrResult.investment_suggestions?.map(inv => `- ${inv}`).join('\n') || 'No investment suggestions available'}

### Available Deductions
${itrResult.deductions?.map(ded => `- ${ded}`).join('\n') || 'No deductions identified'}

---
Generated by FinAI ITR Helper
Report saved to: ${itrResult.file_saved || 'Not specified'}
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ITR_Optimization_Report_${new Date().toISOString().split('T')[0]}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // If we have detailed markdown content, use the new renderer
  if (hasDetailedReport) {
    return (
      <div>
        <ITRReportRenderer
          reportContent={itrResult.markdown!}
          reportType={getReportType()}
          generatedDate={new Date().toLocaleDateString('en-IN', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
          task={itrResult.task || 'ITR Tax Optimization'}
          caReportLength={itrResult.ca_report_length || 0}
          documentsProcessed={itrResult.files_processed || 1}
        />
        <ITRHelperButton />
        <ChatbotOverlay reportType="itr-report" />
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-amber-50 to-orange-100 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center"
        >
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600 mx-auto mb-4"></div>
          <p className="text-amber-700 font-medium">Loading ITR analysis results...</p>
        </motion.div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-pink-100 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center max-w-md mx-auto p-6"
        >
          <div className="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-2xl font-bold text-red-700 mb-4">Error Loading Report</h2>
          <p className="text-red-600 mb-6">{error}</p>
          <Button 
            onClick={handleBackToHome}
            className="bg-red-600 hover:bg-red-700 text-white"
          >
            Go Back to Home
          </Button>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-amber-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className="text-3xl font-bold text-amber-700">
                üèõÔ∏è ITR Optimization Report
              </h1>
              <Badge className="bg-green-100 text-green-800 border-green-200">
                Analysis Complete
              </Badge>
            </div>
            <div className="flex space-x-3">
              <Button
                onClick={handleDownloadReport}
                className="bg-amber-600 hover:bg-amber-700 text-white"
              >
                üìÑ Download Report
              </Button>
              <Button
                onClick={handleBackToHome}
                variant="outline"
                className="border-amber-300 text-amber-700 hover:bg-amber-50"
              >
                üè† Back to Home
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="space-y-8"
        >
          {/* Process Information Card */}
          {itrResult && (
            <Card className="p-6 bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200">
              <h2 className="text-2xl font-bold text-amber-800 mb-4 flex items-center">
                üìã Analysis Information
              </h2>
              <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="text-center p-3 bg-white rounded-lg shadow-sm">
                  <div className="text-lg font-bold text-amber-600">
                    {itrResult.client_category?.toUpperCase() || 'N/A'}
                  </div>
                  <div className="text-amber-700 text-sm">Client Type</div>
                </div>
                <div className="text-center p-3 bg-white rounded-lg shadow-sm">
                  <div className="text-lg font-bold text-amber-600">
                    {itrResult.ca_report_used ? 'Yes' : 'No'}
                  </div>
                  <div className="text-amber-700 text-sm">CA Report Used</div>
                </div>
                <div className="text-center p-3 bg-white rounded-lg shadow-sm">
                  <div className="text-lg font-bold text-amber-600">
                    {itrResult.files_processed || 0}
                  </div>
                  <div className="text-amber-700 text-sm">PDFs Processed</div>
                </div>
                <div className="text-center p-3 bg-white rounded-lg shadow-sm">
                  <div className="text-lg font-bold text-amber-600">
                    {itrResult.ca_report_length ? `${Math.round(itrResult.ca_report_length / 1000)}K` : 'N/A'}
                  </div>
                  <div className="text-amber-700 text-sm">CA Report Size</div>
                </div>
              </div>
            </Card>
          )}

          {/* Main Analysis Result Card */}
          {itrResult?.result && (
            <Card className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
              <h2 className="text-2xl font-bold text-blue-800 mb-4 flex items-center">
                üìä ITR Analysis Results
              </h2>
              <div className="text-blue-700 text-sm leading-relaxed whitespace-pre-wrap max-h-96 overflow-y-auto bg-white p-4 rounded-lg border">
                {itrResult.result}
              </div>
            </Card>
          )}

          {/* Task Information */}
          {itrResult?.task && (
            <Card className="p-4 bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200">
              <h3 className="text-lg font-bold text-purple-800 mb-2 flex items-center">
                üéØ Analysis Task
              </h3>
              <p className="text-purple-700 text-sm">
                {itrResult.task}
              </p>
            </Card>
          )}

          {/* Legacy Summary Card */}
          {(itrResult?.summary || itrResult?.message) && (
            <Card className="p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
              <h2 className="text-2xl font-bold text-blue-800 mb-4 flex items-center">
                üìä Executive Summary
              </h2>
              <p className="text-blue-700 text-lg leading-relaxed">
                {itrResult.summary || itrResult.message}
              </p>
            </Card>
          )}

          {/* Tax Savings Card */}
          {itrResult?.tax_savings && (
            <Card className="p-6 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200">
              <h2 className="text-2xl font-bold text-green-800 mb-4 flex items-center">
                üí∞ Tax Savings Potential
              </h2>
              <div className="grid md:grid-cols-2 gap-4">
                <div className="text-center p-4 bg-white rounded-lg shadow-sm">
                  <div className="text-3xl font-bold text-green-600">
                    ‚Çπ{itrResult.tax_savings.amount.toLocaleString()}
                  </div>
                  <div className="text-green-700 font-medium">Potential Savings</div>
                </div>
                <div className="text-center p-4 bg-white rounded-lg shadow-sm">
                  <div className="text-3xl font-bold text-green-600">
                    {itrResult.tax_savings.percentage}%
                  </div>
                  <div className="text-green-700 font-medium">Tax Reduction</div>
                </div>
              </div>
            </Card>
          )}

          {/* Recommendations Card */}
          {itrResult?.recommendations && itrResult.recommendations.length > 0 && (
            <Card className="p-6 bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200">
              <h2 className="text-2xl font-bold text-purple-800 mb-4 flex items-center">
                üéØ Key Recommendations
              </h2>
              <div className="space-y-3">
                {itrResult.recommendations.map((recommendation, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="flex items-start space-x-3 p-3 bg-white rounded-lg shadow-sm"
                  >
                    <div className="flex-shrink-0 w-6 h-6 bg-purple-100 rounded-full flex items-center justify-center text-purple-600 text-sm font-bold">
                      {index + 1}
                    </div>
                    <p className="text-purple-700 flex-1">{recommendation}</p>
                  </motion.div>
                ))}
              </div>
            </Card>
          )}

          {/* Investment Suggestions Card */}
          {itrResult?.investment_suggestions && itrResult.investment_suggestions.length > 0 && (
            <Card className="p-6 bg-gradient-to-r from-orange-50 to-red-50 border-orange-200">
              <h2 className="text-2xl font-bold text-orange-800 mb-4 flex items-center">
                üìà Investment Suggestions
              </h2>
              <div className="grid md:grid-cols-2 gap-4">
                {itrResult.investment_suggestions.map((suggestion, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="p-4 bg-white rounded-lg shadow-sm border-l-4 border-orange-400"
                  >
                    <p className="text-orange-700">{suggestion}</p>
                  </motion.div>
                ))}
              </div>
            </Card>
          )}

          {/* Deductions Card */}
          {itrResult?.deductions && itrResult.deductions.length > 0 && (
            <Card className="p-6 bg-gradient-to-r from-teal-50 to-cyan-50 border-teal-200">
              <h2 className="text-2xl font-bold text-teal-800 mb-4 flex items-center">
                üìã Available Deductions
              </h2>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-3">
                {itrResult.deductions.map((deduction, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: index * 0.05 }}
                    className="p-3 bg-white rounded-lg shadow-sm text-center"
                  >
                    <Badge className="bg-teal-100 text-teal-800 border-teal-200">
                      {deduction}
                    </Badge>
                  </motion.div>
                ))}
              </div>
            </Card>
          )}

          {/* Action Buttons */}
          <div className="text-center space-y-4 pt-8 border-t border-amber-200">
            <p className="text-amber-700 font-medium">
              Need another analysis? Upload a different CA report
            </p>
            <div className="flex justify-center space-x-4">
              <Button
                onClick={handleBackToHome}
                className="bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-600 hover:to-orange-600 text-white font-semibold py-3 px-6 rounded-full shadow-lg hover:shadow-xl transition-all duration-300"
              >
                üîÑ New Analysis
              </Button>
            </div>
          </div>
        </motion.div>
      </div>

      {/* ITR Helper Button */}
      <ITRHelperButton />
      <ChatbotOverlay reportType="itr-report" />
    </div>
  );
}